#+TITLE:       Vagrant => 程序员的 Virtual Machine
#+AUTHOR:      venmos
#+EMAIL:       venmos@fuck.gfw.es
#+DATE:        2012-09-22
#+URI:         /blog/%y/%m/%d/vagrant-code-virtual-machine
#+KEYWORDS:    vagrant, 配置, 程序员, 虚拟机
#+TAGS:        osx, code,
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: vagrant, 配置, 程序员, 虚拟机

我们在上班时都是在一个封闭的环境中(办公室),用着一致的计算机(统一安装部署开发环境),望着一样的人(万年不变的对面的脸)做着一样的事,虽然如此很无趣,但是甚少出现莫名其妙的BUG.

而我们在下班后,可能会参与到各种五花八门的开源项目中.我们要与一些素未谋面,甚至都不知道叫什么的人在一起协作.他们用着与你不同的操作系统,可能是Linux,也可能是Windows;他们用着与你不用的编辑器,可能是Vim,也可能是IDE;他们有的人可能只参与Ruby的项目,也可能有的Ruby::Python::C的都参加.这样很有乐趣,因为他们与我身处不同的环境之中,我每天都可以从他们那里以他们的视角学习到许多不同的东西.不过也会带来麻烦,因为环境不同就会更加容易出现莫名其妙的BUG,增大了调试的难度.

所以尽可能的保持测试环境的一致性,又尽可能的减少对原有环境的影响,就变成了一件非常重要的事情.曾经我们使用VirtualBox或者VMware来解决这个问题,而现在我们有了更先进的武器 => Vagrant .

Vagrant是用Ruby语言开发的专门用于构建虚拟化开发环境的工具,Vagrant封装了虚拟镜像,Virtualbox接口以及大量的成熟的配置工具,从而帮助我们快速的创建,配置可重复使用与大量分发的虚拟开发环境.更重要的是Vagrant是跨平台的,Mac:Linux:Windows.

Vagrant使用Gem进行分发,同时需要VirtualBox API,所以在安装Vagrant之前我们需要先安装以下组件:

- [[http://www.ruby-lang.org/zh_cn/downloads/][Ruby]]
- [[http://rubygems.org/][RubyGems]]
- [[https://www.virtualbox.org/wiki/Downloads][VirtualBox]]

然后使用gem install vagrant命令来安装Vagrant.安装完成之后可以使用vagrant -v命令来查看vagrant的版本号.之后我们可以根据vagrant官方主页提供的简单三部曲来从vagrant官网download一个预先制作好的box,并部署到本地,然后运行:

#+begin_src
$ vagrant box add base http://files.vagrantup.com/lucid32.box
$ vagrant init
$ vagrant up
#+end_src

box镜像下载部署启动成功后,vagrant会提示你使用vagrant ssh命令来登录虚拟环境的Shell,执行完vagrant ssh命令之后你会发现你进入了一个ubuntu server的shell之中,这个ubuntu server就是你在刚才的简单三部曲之中所执行的第一步所下载下来的vagrant预先制作好的box.

你可以在这个ubuntu server的虚拟环境中配置你的开发环境,比如安装apache2:sudo apt-get install apache2,安装完成之后你可以使用wget -O- 127.0.0.0.1:80来测试Apache2是否配置成功.当然你也可以安装其他,如:rvm:ruby:rails:python:mysql:vim:emacs或者其他更多你所需要使用的程序或相关包.

配置完你的开发环境之后你可以使用exit命令来退出vagrant的虚拟环境,退出vagrant的虚拟环境之后你会发现你在执行vagrant简单三部曲的目录之中多来一个Vagrantfile的文件,这个文件即是vagrant虚拟环境的配置文件,它使用Ruby语法编写,你可以修改这个文件之中的内容来配置虚拟主机.

比如我要将vagrant虚拟环境的Apache2的80端口转到127.0.0.1:8080,这样更方便我原环境进行测试,我只需要在Vagrantfile之中加入这么一行:

#+begin_src
config.vm.forward_port 80, 8080
#+end_src

之后在使用vagrant halt命令关闭虚拟环境,在使用vagrant up命令启动虚拟环境,然后打开宿主环境的游览器,输入127.0.0.1:8080,就可以访问到vagrant的虚拟环境之中的Apache2的默认欢迎页面了.当然我也可以同时转发多个服务或用更清晰的语法来写,比如以下同时转发了80与3306:

#+begin_src
Vagrant::Config.run do |config|
  config.vm.defind :web do |web_config|
    web_config.vm.box = "apache2"
    web_config.vm.forward_port 80, 8080
  end

  config.vm.defind :db do |db_config|
    db_config.vm.box = "mysql"
    db_config.vm.forward_port 3306, 3306
  end
end
#+end_src
Vagrantfile也支持其他配置来简化我们的开发,比如为虚拟环境设置一个IP,然后挂载虚拟环境的目录到宿主主机,这样我们就可以使用宿主环境里的编辑器或者IDE来即时的在虚拟环境之中开发测试:

#+begin_src
Vagrant::Config.ru do |config|
  config.vm.network :hostonly, "192.168.2.1", netmask => "255.255.255.0"
  config.vm.share_folder("vagrant", "/home/vagrant", ".", :nfs => true)
end
#+end_src

最后,我们可能需要复用或者分发搭建好的虚拟环境,这在vagrant中非常简单,只需要来这么一条命令:vagrant package --output boxname.box,vagrant就会开始自动打包box文件.

以上只是简单来介绍vagrant的几个简单的使用示例,vagrant还能应用到更加复杂的环境部署之中,比如实现自动化应用环境的开发,创建,部署,甚至将环境的集成纳入构建流水线之中.更多详细的配置范例可以查阅vagrant的官方 [[http://vagrantup.com/v1/docs/index.html][Documentation]] .
